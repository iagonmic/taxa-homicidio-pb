import streamlit as st
import pandas as pd
import plotly.express as px
import json

def main():
    st.set_page_config(page_title='An치lise Municipal', page_icon='游늸', layout='wide')

    with st.sidebar:
        option = st.selectbox('Modo de visualiza칞칚o:', options=['Colunas', 'Intervalo'], index=0)

        head_amount = st.number_input('Quantidade de linhas na tabela:', min_value=0, value=5)

        fill_button = st.checkbox('Visualizar munic칤pios com dados indispon칤veis', value=True)

    paraiba = get_transformed_json()

    df = df_transformed(path='csv_visualizacao/mun_taxa_homicidios.csv', fill=fill_button)
    
    st.warning('Para cidades com baixa popula칞칚o, os c치lculos apresentados podem apresentar discrep칙ncias devido ao c치lculo da taxa de homic칤dio ser feita para cada 100mil habitantes. Recomendamos que os resultados sejam interpretados com cautela, levando em conta poss칤veis varia칞칫es e incertezas.',icon='游뚿')
    if option == 'Colunas':
        
        col1, col2 = st.columns(2, gap='large')

        with col1:
            select_option1 = st.selectbox('Selecione o ano a ser analisado para o primeiro mapa:', index=0, options=range(2010,2023), key='selectbox1')

            df1 = df[df['Ano'] == select_option1]

            df1_sorted = (df1
            .sort_values(by='Taxa de Homic칤dio (100 mil hab.)', ascending=False)
            .head(head_amount)
            .assign(Ranking = lambda x: x.reset_index().index + 1)
            .filter(['Ranking','C칩digo do Munic칤pio', 'Nome do Munic칤pio', 'Taxa de Homic칤dio (100 mil hab.)'])
            )

            fig = plot_choropleth(
                df1,
                geojson=paraiba,
                locations='C칩digo do Munic칤pio',
                color='Taxa de Homic칤dio (100 mil hab.)',
                featureidkey='properties.id',
                hover_data=[column for column in df.columns if column not in ['Nome do Munic칤pio', 'Ano']],
                hover_name='Nome do Munic칤pio',
                ano = select_option1,
                height=500,
            )

            st.plotly_chart(fig, key='map1')
            
            st.dataframe(df1_sorted, hide_index=True, width=2000)

        with col2:
            select_option2 = st.selectbox('Selecione o ano a ser analisado para o segundo mapa:', index=12, options=range(2010,2023), key='selectbox2')

            df2 = df[df['Ano'] == select_option2]

            df2_sorted = (df2
            .sort_values(by='Taxa de Homic칤dio (100 mil hab.)', ascending=False)
            .head(head_amount)
            .assign(Ranking = lambda x: x.reset_index().index + 1)
            .filter(['Ranking','C칩digo do Munic칤pio', 'Nome do Munic칤pio', 'Taxa de Homic칤dio (100 mil hab.)'])
            )

            fig = plot_choropleth(
                df2,
                geojson=paraiba,
                locations='C칩digo do Munic칤pio',
                color='Taxa de Homic칤dio (100 mil hab.)',
                featureidkey='properties.id',
                hover_data=[column for column in df.columns if column not in ['Nome do Munic칤pio', 'Ano']],
                hover_name='Nome do Munic칤pio',
                ano = select_option2,
                height=500,
            )
            
            st.plotly_chart(fig, key='map2')

            st.dataframe(df2_sorted, hide_index=True, width=2000)

    elif option == 'Intervalo':

        select_option_slider = st.slider('Selecione o intervalo a ser analisado no mapa:', min_value=2010, max_value=2022, value=(2010,2022), key='slider1')

        df_slider = (
            df[
                (df['Ano'] >= select_option_slider[0]) & (df['Ano'] <= select_option_slider[1])
            ].groupby('C칩digo do Munic칤pio')['Taxa de Homic칤dio (100 mil hab.)']
            .mean()
            .reset_index()
            .merge(df[['C칩digo do Munic칤pio','Nome do Munic칤pio']], on='C칩digo do Munic칤pio', how='inner')
            .drop_duplicates()
            )

        df_slider_sorted = (df_slider
            .sort_values(by='Taxa de Homic칤dio (100 mil hab.)', ascending=False)
            .head(head_amount)
            .assign(Ranking = lambda x: x.reset_index().index + 1)
            .filter(['Ranking','C칩digo do Munic칤pio', 'Nome do Munic칤pio', 'Taxa de Homic칤dio (100 mil hab.)'])
            )

        fig = plot_choropleth(
            df_slider,
            geojson=paraiba,
            locations='C칩digo do Munic칤pio',
            color='Taxa de Homic칤dio (100 mil hab.)',
            featureidkey='properties.id',
            hover_data=[column for column in df_slider.columns if column not in ['Nome do Munic칤pio', 'Ano']],
            hover_name='Nome do Munic칤pio',
            height=600,
            ano = select_option_slider
        )

        st.plotly_chart(fig, key='map1')

        st.dataframe(df_slider_sorted, hide_index=True, width=2000)


def get_transformed_json(): # transforma칞칚o do id dentro do json
    with open('data/paraiba.json', 'r', encoding='utf-8') as file:
        state = json.load(file)
        
        for i in range(len(state['features'])):
            state['features'][i]['properties']['id'] = state['features'][i]['properties']['id'][:-1]

    return state

def plot_choropleth(df, geojson, locations, color, featureidkey, hover_data, hover_name, ano, range_color=None, height=None):
    fig = px.choropleth(
            df,
            geojson=geojson,
            locations=locations,
            color=color,
            featureidkey=featureidkey,
            color_continuous_scale='Oranges', # escala de cor
            hover_data=hover_data,
            hover_name=hover_name,
            range_color=range_color,
            #title=f'Taxa de Homic칤dio na Para칤ba em {ano}'
        )

    fig.update_geos(
        fitbounds='locations', # dar zoom no gr치fico
        visible=False, # excluir outras localiza칞칫es n칚o marcadas
        bgcolor='rgba(0,0,0,0)' # fundo transparente
    )

    fig.update_traces(
        hovertemplate="<b>Munic칤pio:</b> %{hovertext}<br>" + 
                  "<b>Taxa de Homic칤dio (100 mil hab.):</b> %{z}<br>" +  
                  "<extra></extra>",

        hoverlabel=dict(
            font_size=16,
            bgcolor="black",  
            bordercolor="white",  
            font_color="white"
        ),
    )

    fig.update_layout(
        height=height,
        coloraxis_colorbar=dict(
            title="Taxa Hom.",
            x=1,  # posi칞칚o horizontal (0: extrema esquerda, 1: extrema direita)
            dtick='25',
        ),
        hovermode='closest',
    )

    fig.add_annotation(
        showarrow=False,
        text='Os munic칤pios que tem taxa igual a 0 n칚o possuem dados dispon칤veis no per칤odo. Fonte: DATASUS e IBGE.',
        font=dict(size=12), 
        x=0.5,
        y=-0.1
    )

    return fig

def df_transformed(path, fill=True):

    df = (
        pd.read_csv(
            path, 
            index_col='Unnamed: 0',
            dtype={'COD_MUN': str}
        )
        .reset_index()
        .drop('index', axis=1)
    )

    df = df.rename({
        'TAXA_HOMICIDIO': 'Taxa de Homic칤dio (100 mil hab.)',
        'COD_MUN': 'C칩digo do Munic칤pio',
        'NOM_MUN': 'Nome do Munic칤pio',
        'ANO': 'Ano',
        'HOMICIDIOS': 'Quantidade de Homic칤dios',
        'POPULACAO': 'Popula칞칚o do Ano Selecionado'
        }, axis=1)

    df['Taxa de Homic칤dio (100 mil hab.)'] = (
        df['Taxa de Homic칤dio (100 mil hab.)']
        #.apply(lambda x: normalize(x, df, 'Taxa de Homic칤dio (%)'))
    )

    anos = df['Ano'].unique()
    cod_mun = list(df['C칩digo do Munic칤pio'].unique())
    nom_mun = list(df['Nome do Munic칤pio'].unique())

     # adicionar carrapateira manualmente
    cod_mun.append('250410') 
    nom_mun.append('Carrapateira')

    df_nom_mun = pd.DataFrame(
        data=list(zip(nom_mun, cod_mun)),
        columns=['Nome do Munic칤pio', 'C칩digo do Munic칤pio']
        )

    df = (df.merge(
        pd.DataFrame(
            index=pd.MultiIndex.from_product(
                [anos, cod_mun], names=['Ano', 'C칩digo do Munic칤pio']
            )
        ).reset_index(),
        on=['Ano', 'C칩digo do Munic칤pio'],
        how='outer'
        )
        .merge(df_nom_mun, 'outer', on='C칩digo do Munic칤pio')
        .drop('Nome do Munic칤pio_x', axis=1)
        .rename({'Nome do Munic칤pio_y': 'Nome do Munic칤pio'}, axis=1)
        )

    if fill:
        df = df.fillna(0)

    return df

def normalize(number, df, column:str):
    x = round(100 * (number-df[column].min())/(df[column].max()-df[column].min()), 2)

    return x

if __name__ == '__main__':
    main()